{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setnewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","signInWithPopup","GoogleAuthProvider","GithubAuthProvider","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","onDeleteClick","window","confirm","doc","id","delete","refFromURL","attachmentUrl","toggleEditing","update","autoFocus","src","class","faTrash","faPencilAlt","NweetFactory","userObj","nweet","setNweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","maxLength","for","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","nweets","setNweets","useEffect","onSnapshot","snapshot","nweetArray","docs","map","data","marginTop","refreshUser","history","useHistory","displayName","newDisplayName","setNewDisplayName","updateProfile","signOut","push","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","Profile","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","updatePrifile","Boolean","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e6da3dc0.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyB_Y2m229YWUmdcr6fpM3MAp01OrkiaJSg\",\r\n    authDomain:\"nwitter-cfd13.firebaseapp.com\",\r\n    projectId: \"nwitter-cfd13\",\r\n    storageBucket: \"nwitter-cfd13.appspot.com\",\r\n    messagingSenderId: \"523573858721\",\r\n    appId: \"1:523573858721:web:5dce0a05bf10a1beb63be0\",\r\n\r\n  };\r\n\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance=firebase;\r\n\r\nexport const authService=firebase.auth();\r\n\r\nexport const dbService=firebase.firestore();\r\n\r\nexport const storageService=firebase.storage();","import { authService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst AuthForm=()=>{\r\n    const [email,setEmail]=useState(\"\");\r\n    const[password,setPassword]=useState(\"\");\r\n    const[newAccount,setnewAccount]=useState(true);\r\n    const[error,setError]=useState(\"\");\r\n    const onChange=(event)=>{\r\n        const {target:{name,value},}=event; //값의 변경이 발생한 부분\r\n        if(name===\"email\"){ \r\n            setEmail(value)\r\n        }\r\n        else if(name===\"password\"){\r\n            setPassword(value);        }\r\n\r\n    };\r\n    const onSubmit=async(event)=>{\r\n        event.preventDefault();//누군가 form을 submit했을 때 기본 행위가 실행되지 않고 개발자가 컨트롤할 수 있게 해줌 (새로고침 안됨)\r\n        \r\n        try{\r\n            let data;\r\n            if(newAccount){//create account\r\n                const data=await authService.createUserWithEmailAndPassword(email,password);\r\n            }\r\n            else{//login\r\n                const data=await authService.signInWithEmailAndPassword(email,password);\r\n            }\r\n        }\r\n\r\n        catch(error){\r\n            setError(error.message);\r\n        }\r\n    };\r\nconst toggleAccount=()=>setnewAccount(prev=>!prev);\r\n    return(\r\n        <>\r\n             <form onSubmit={onSubmit} className=\"container\">\r\n                <input\r\n                name=\"email\"\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                required\r\n                value={email}\r\n                onChange={onChange}\r\n                className=\"authInput\"\r\n                />\r\n                <input\r\n                name=\"password\"\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                required\r\n                value={password}\r\n                className=\"authInput\"\r\n                onChange={onChange}\r\n                />\r\n                <input\r\n                type=\"submit\"\r\n                className=\"authInput authSubmit\"\r\n                value={newAccount ? \"Create Account\" : \"Sign In\"}\r\n                />\r\n               \r\n                {error && <span className=\"authError\">{error}</span>}\r\n            </form>\r\n            <span onClick={toggleAccount} className=\"authSwitch\">\r\n                {newAccount?\"SIgn in\":\"Create Account\" }\r\n            </span>\r\n        </>\r\n\r\n    );\r\n};\r\n\r\nexport default AuthForm;","import AuthForm from 'components/AuthForm';\r\nimport { authService, firebaseInstance } from 'fbase';\r\nimport React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTwitter,\r\n  faGoogle,\r\n  faGithub,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nconst Auth= ()=>{\r\n    const onSocialClick=async(event)=>{\r\n        const{\r\n            target:{name},   \r\n        }=event;\r\n    \r\n        if(name===\"google\"){ //구글 계정으로 로그인\r\n            await authService.signInWithPopup(new firebaseInstance.auth.GoogleAuthProvider(),);\r\n    \r\n    \r\n        }else if(name===\"gihub\"){//깃허브 계정으로 로그인 \r\n            const data=await authService.signInWithPopup(new firebaseInstance.auth.GithubAuthProvider(),);\r\n        }\r\n    \r\n        \r\n    };\r\n    return (\r\n      <div className=\"authContainer\">\r\n        <FontAwesomeIcon\r\n          icon={faTwitter}\r\n          color={\"#04AAFF\"}\r\n          size=\"3x\"\r\n          style={{ marginBottom: 30 }}\r\n        />\r\n        <AuthForm />\r\n        <div className=\"authBtns\">\r\n          <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\r\n            Continue with Google <FontAwesomeIcon icon={faGoogle} />\r\n          </button>\r\n          <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\r\n            Continue with Github <FontAwesomeIcon icon={faGithub} />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n\r\nexport default Auth; //자동으로 import 할 수 있게 해줌 ","import { dbService, storageService } from \"fbase\";\r\nimport React,{useState} from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Nweet=({nweetObj,isOwner})=>{\r\n    const [editing,setEditing]=useState(false);// edit mode인지 알려줌 \r\n    const [newNweet,setNewNweet]=useState(nweetObj.text); //input에 입력된 text를 update\r\n    const onDeleteClick=async()=>{\r\n        const ok=window.confirm(\"Are you sure you want to delte this nweet?\");\r\n        if(ok){\r\n            await dbService.doc(`nweets/${nweetObj.id}`).delete(); //delte id\r\n            await storageService.refFromURL(nweetObj.attachmentUrl).delete(); //delete photo\r\n        }\r\n    };\r\n    const toggleEditing=()=>{setEditing((prev)=> !prev)};\r\n    const onSubmit=async(event)=>{\r\n        event.preventDefault();\r\n        await dbService.doc(`nweets/${nweetObj.id}`).update({\r\n            text:newNweet\r\n        });\r\n        setEditing(false);\r\n    };\r\n    const onChange=(event)=>{\r\n        const {target:{value},}=event;\r\n        setNewNweet(value);\r\n    };\r\n    return (\r\n      <div className=\"nweet\">\r\n        {editing ? (\r\n          <>\r\n            <form onSubmit={onSubmit} className=\"container nweetEdit\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Edit your nweet\"\r\n                value={newNweet}\r\n                required\r\n                autoFocus\r\n                onChange={onChange}\r\n                className=\"formInput\"\r\n              />\r\n              <input type=\"submit\" value=\"Update Nweet\" className=\"formBtn\" />\r\n            </form>\r\n            <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\r\n              Cancel\r\n            </span>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <h4>{nweetObj.text}</h4>\r\n            {nweetObj.attachmentUrl && <img src={nweetObj.attachmentUrl} />}\r\n            {isOwner && (\r\n              <div class=\"nweet__actions\">\r\n                <span onClick={onDeleteClick}>\r\n                  <FontAwesomeIcon icon={faTrash} />\r\n                </span>\r\n                <span onClick={toggleEditing}>\r\n                  <FontAwesomeIcon icon={faPencilAlt} />\r\n                </span>\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n\r\nexport default Nweet;","import { dbService, storageService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport {v4 as uuidv4} from \"uuid\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst NweetFactory =({userObj})=>{\r\n    //Nweets 생성담당\r\n    const [nweet,setNweet]=useState(\"\");\r\n    const [attachment,setAttachment]=useState(\"\");\r\n    const onSubmit=async(event)=>{\r\n        if (nweet === \"\") {\r\n            return;\r\n          }\r\n        event.preventDefault();\r\n        let attachmentUrl=\"\";\r\n        if(attachment!==\"\"){\r\n            const attachmentRef=storageService.ref().child(`${userObj.uid}/${uuidv4()}`);//파일에 대한 reference\r\n            const response=await attachmentRef.putString(attachment,\"data_url\");//string data를 reference에게 보냄\r\n            attachmentUrl=await response.ref.getDownloadURL();// 사진을 볼 수 있는 url을 줌 \r\n        }\r\n        const nweetObj={\r\n            text:nweet, //document의 key\r\n            createdAt: Date.now(),\r\n            creatorId:userObj.uid,\r\n            attachmentUrl,\r\n        }\r\n        \r\n        await dbService.collection(\"nweets\").add(nweetObj);//document ID를 자동으로 부여하며 새로운 document 추가 \r\n        setNweet(\"\");\r\n        setAttachment(\"\");\r\n    };\r\n    const onChange=(event)=>{// event안의 target안의 value를 주는 것 \r\n        //const {taget:{value},}=event; == event.target.value\r\n        setNweet(event.target.value);\r\n     \r\n    }\r\n    const onFileChange=(event)=>{\r\n        const {target:{files},}=event;//event가 target안의 files 가리킴\r\n        const theFile=files[0];\r\n        const reader=new FileReader();\r\n        reader.onloadend=(finishedEvent)=>{//event listner : 파일 로딩이 끝날 때 finishedEvent가짐 \r\n            const {currentTarget:{result},}=finishedEvent;\r\n            setAttachment(result)\r\n        };\r\n        reader.readAsDataURL(theFile);\r\n    };\r\n    const onClearAttachment =()=>setAttachment(\"\"); //사진 clear시킴\r\n    return (\r\n      <form onSubmit={onSubmit} className=\"factoryForm\">\r\n        <div className=\"factoryInput__container\">\r\n          <input\r\n            className=\"factoryInput__input\"\r\n            value={nweet}\r\n            onChange={onChange}\r\n            type=\"text\"\r\n            placeholder=\"What's on your mind?\"\r\n            maxLength={120}\r\n          />\r\n          <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\r\n        </div>\r\n        <label for=\"attach-file\" className=\"factoryInput__label\">\r\n          <span>Add photos</span>\r\n          <FontAwesomeIcon icon={faPlus} />\r\n        </label>\r\n        <input\r\n          id=\"attach-file\"\r\n          type=\"file\"\r\n          accept=\"image/*\"\r\n          onChange={onFileChange}\r\n          style={{\r\n            opacity: 0,\r\n          }}\r\n        />\r\n        {attachment && (\r\n          <div className=\"factoryForm__attachment\">\r\n            <img\r\n              src={attachment}\r\n              style={{\r\n                backgroundImage: attachment,\r\n              }}\r\n            />\r\n            <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\r\n              <span>Remove</span>\r\n              <FontAwesomeIcon icon={faTimes} />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </form>\r\n    );\r\n  };\r\n\r\n\r\nexport default NweetFactory;","import React,{useEffect, useState} from 'react';\r\nimport {dbService,storageService} from \"fbase\";\r\nimport Nweet from \"../components/Nweet\";\r\nimport NweetFactory from 'components/NweetFactory';\r\nconst Home= ({userObj})=>{\r\n    const [nweets,setNweets]=useState([]);\r\n\r\n    const getNweets=async()=>{\r\n        const dbNweets=await dbService.collection(\"nweets\").get();\r\n        dbNweets.forEach((document)=>{\r\n            //dbNweets에 있는 모든 document에 대해 setNweets에서 함수를 사용하고 있는데 배열을 리턴, 이 배열에서 첫 번째 요소는 가장 최근 documet이고, 그 뒤로 이전 documet를 붙임  \r\n            const nweetObject={\r\n                ...document.data(),//...: spread attribute 기능 -> 데이터를 가져와서 풀어냄\r\n                id:document.id,\r\n                \r\n            };\r\n            setNweets(prev=>[nweetObject, ...prev]);//set을 쓰는 함수에서 값 대신에 함수를 전달할 수 있음 -> 만약 함수를 전달하면 리액트는 이전 값에 접근할 수 있게 해줌 \r\n        });\r\n        /*dbNweets는 QueryDocumentSnapshot 형태이므로 \r\n        dbNweets.forEach(document=> console.log(document.data()))를 이용해야\r\n        document들 확인 가능 \r\n        */\r\n    };\r\n    useEffect(()=>{\r\n        //getNweets();\r\n        //getNweets나 snapshot 모두 nweets를 얻는 것은 동일하므로 한가지만 사용하면 됨\r\n        dbService.collection(\"nweets\").onSnapshot(snapshot=>{//onSnapshot은 지우거나 업데이트 등 무언가를 하면 실행됨\r\n            const nweetArray=snapshot.docs.map(doc =>({id:doc.id, ...doc.data(),}));\r\n            setNweets(nweetArray);\r\n        })\r\n    },[]);\r\n    \r\n    return (\r\n        <div className=\"container\">\r\n            <NweetFactory userObj={userObj}/>\r\n            <div  style={{ marginTop: 30 }}>\r\n                {nweets.map((nweet)=>(\r\n                    <Nweet key={nweet.id} nweetObj={nweet} isOwner={nweet.creatorId===userObj.uid} />\r\n                ))}    \r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\nexport default Home;","import { authService, dbService } from 'fbase';\r\nimport React, { useState } from 'react';\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nexport default ({userObj,refreshUser})=>{\r\n    const history=useHistory();\r\n    const [newDisplayName,setNewDisplayName]=useState(userObj.displayName);\r\n    const onLogOutClick=()=>{\r\n        authService.signOut();\r\n        history.push(\"/\");//home으로 갈 수 있는 hooks 이용 방법\r\n    };\r\n    const onChange=(event)=>{\r\n        const {target:{value},}=event;\r\n        setNewDisplayName(value);\r\n    };\r\n    const onSubmit=async(event)=>{\r\n        event.preventDefault();\r\n        if(userObj.displayName!==newDisplayName){\r\n            await userObj.updateProfile({\r\n                displayName:newDisplayName,\r\n            });\r\n            refreshUser();\r\n        }\r\n    };\r\n\r\n \r\n    return (\r\n \r\n      <div className=\"container\">\r\n        <form onSubmit={onSubmit} className=\"profileForm\">\r\n          <input\r\n            onChange={onChange}\r\n            type=\"text\"\r\n            autoFocus\r\n            placeholder=\"Display name\"\r\n            value={newDisplayName}\r\n            className=\"formInput\"\r\n          />\r\n          <input\r\n            type=\"submit\"\r\n            value=\"Update Profile\"\r\n            className=\"formBtn\"\r\n            style={{\r\n              marginTop: 10,\r\n            }}\r\n          />\r\n        </form>\r\n        <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\r\n          Log Out\r\n        </span>\r\n      </div>\r\n        \r\n\r\n    );\r\n\r\n};","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Navigation = ({ userObj }) => (\r\n    <nav>\r\n      <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\r\n        <li>\r\n          <Link to=\"/\" style={{ marginRight: 10 }}>\r\n            <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link\r\n            to=\"/profile\"\r\n            style={{\r\n              marginLeft: 10,\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              alignItems: \"center\",\r\n              fontSize: 12,\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\r\n            <span style={{ marginTop: 10 }}>\r\n              {userObj.displayName\r\n                ? `${userObj.displayName}의 Profile`\r\n                : \"Profile\"}\r\n            </span>\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n  //home과 profile로 가는 두 링크 존재\r\nexport default Navigation;","import React from \"react\";\r\nimport {HashRouter as Router,Route,Switch,Redirect} from \"react-router-dom\";\r\nimport Auth from \"../routes/Auth\";\r\nimport Home from \"../routes/Home\";\r\nimport Profile from \"../routes/Profile\";\r\nimport Navigation from \"components/Navigation\";\r\n\r\n\r\n\r\nconst AppRouter=({isLoggedIn,userObj,refreshUser}) =>{\r\n    \r\n    return(\r\n        <Router>\r\n            {isLoggedIn && <Navigation userObj={userObj}/>}\r\n            <Switch>\r\n                {isLoggedIn ? (//로그인 했을 때  (userobj={userObj} -> 그 태그에 userObj 객체를 전달 )\r\n                    <div\r\n                        style={{\r\n                            maxWidth: 890,\r\n                            width: \"100%\",\r\n                            margin: \"0 auto\",\r\n                            marginTop: 80,\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                        }}\r\n                    >\r\n                        <Route exact path=\"/\">\r\n                            <Home userObj={userObj}/>\r\n                        </Route>\r\n                        <Route exact path=\"/profile\">\r\n                            <Profile userObj={userObj} refreshUser={refreshUser}/>\r\n                        </Route>\r\n                    </div>\r\n                    ):( //로그인하지 않았을 때 (로그아웃도 해당 )\r\n                  \r\n                        <>\r\n                        <Route exact path=\"/\">\r\n                            <Auth />\r\n                        </Route>\r\n                        \r\n                        </>\r\n                )}\r\n            </Switch>\r\n        </Router>\r\n\r\n    );\r\n};\r\n\r\nexport default AppRouter;","import React,{useEffect, useState} from \"react\";\nimport AppRouter from \"./Router\";\nimport {authService} from \"fbase\";\n\nfunction App() {\n  const [init,setInit]=useState(false);//아직 초기화되지않음 \n  const [userObj,setUserObj]=useState(null);\n\n  useEffect(()=>{//변화가 있는가를 감지\n    authService.onAuthStateChanged((user)=>{//로그인, 로그아웃, 초기화 될 떄 발생 함수 \n      \n      if(user){\n       setUserObj({//user를 저장해놓음 (user은 방대한 양을 차지하므로 이용하려는 객체들만 가져옴)\n        displayName:user.displayName,\n        uid:user.uid,\n        updateProfile:(args)=>user.updateProfile(args),\n       });\n       \n      }else{\n        setUserObj(null);\n      }\n      setInit(true); \n    });\n  },[]);\n  const refreshUser=()=>{\n    const user=authService.currentUser;\n   \n    setUserObj({\n      displayName:user.displayName,\n      uid:user.uid,\n      updatePrifile:(args)=>user.updateProfile(args),\n     });\n  };\n  return (\n    <>\n      {init?<AppRouter refreshUser={refreshUser}isLoggedIn={Boolean(userObj)} userObj={userObj}/>:\"Initializing..\"}\n    \n    </>\n  );//isLoggedIn 이라는 props를 Router에 전달\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport firebase from \"./fbase\";\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n  "],"sourceRoot":""}